/**
 * validateapi
 * The validation APIs help you validate data. Check if an E-mail address is real. Check if a domain is real. Check up on an IP address, and even where it is located. All this and much more is available in the validation API.
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CheckResponse', 'model/DomainQualityResponse', 'model/IsAdminPathResponse', 'model/PhishingCheckRequest', 'model/PhishingCheckResponse', 'model/UrlHtmlSsrfRequestFull', 'model/UrlHtmlSsrfResponseFull', 'model/UrlSafetyCheckRequestFull', 'model/UrlSafetyCheckResponseFull', 'model/UrlSsrfRequestBatch', 'model/UrlSsrfRequestFull', 'model/UrlSsrfResponseBatch', 'model/UrlSsrfResponseFull', 'model/ValidateUrlRequestFull', 'model/ValidateUrlRequestSyntaxOnly', 'model/ValidateUrlResponseFull', 'model/ValidateUrlResponseSyntaxOnly', 'model/WhoisResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/CheckResponse'), require('../model/DomainQualityResponse'), require('../model/IsAdminPathResponse'), require('../model/PhishingCheckRequest'), require('../model/PhishingCheckResponse'), require('../model/UrlHtmlSsrfRequestFull'), require('../model/UrlHtmlSsrfResponseFull'), require('../model/UrlSafetyCheckRequestFull'), require('../model/UrlSafetyCheckResponseFull'), require('../model/UrlSsrfRequestBatch'), require('../model/UrlSsrfRequestFull'), require('../model/UrlSsrfResponseBatch'), require('../model/UrlSsrfResponseFull'), require('../model/ValidateUrlRequestFull'), require('../model/ValidateUrlRequestSyntaxOnly'), require('../model/ValidateUrlResponseFull'), require('../model/ValidateUrlResponseSyntaxOnly'), require('../model/WhoisResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.CloudmersiveValidateApiClient) {
      root.CloudmersiveValidateApiClient = {};
    }
    root.CloudmersiveValidateApiClient.DomainApi = factory(root.CloudmersiveValidateApiClient.ApiClient, root.CloudmersiveValidateApiClient.CheckResponse, root.CloudmersiveValidateApiClient.DomainQualityResponse, root.CloudmersiveValidateApiClient.IsAdminPathResponse, root.CloudmersiveValidateApiClient.PhishingCheckRequest, root.CloudmersiveValidateApiClient.PhishingCheckResponse, root.CloudmersiveValidateApiClient.UrlHtmlSsrfRequestFull, root.CloudmersiveValidateApiClient.UrlHtmlSsrfResponseFull, root.CloudmersiveValidateApiClient.UrlSafetyCheckRequestFull, root.CloudmersiveValidateApiClient.UrlSafetyCheckResponseFull, root.CloudmersiveValidateApiClient.UrlSsrfRequestBatch, root.CloudmersiveValidateApiClient.UrlSsrfRequestFull, root.CloudmersiveValidateApiClient.UrlSsrfResponseBatch, root.CloudmersiveValidateApiClient.UrlSsrfResponseFull, root.CloudmersiveValidateApiClient.ValidateUrlRequestFull, root.CloudmersiveValidateApiClient.ValidateUrlRequestSyntaxOnly, root.CloudmersiveValidateApiClient.ValidateUrlResponseFull, root.CloudmersiveValidateApiClient.ValidateUrlResponseSyntaxOnly, root.CloudmersiveValidateApiClient.WhoisResponse);
  }
}(this, function(ApiClient, CheckResponse, DomainQualityResponse, IsAdminPathResponse, PhishingCheckRequest, PhishingCheckResponse, UrlHtmlSsrfRequestFull, UrlHtmlSsrfResponseFull, UrlSafetyCheckRequestFull, UrlSafetyCheckResponseFull, UrlSsrfRequestBatch, UrlSsrfRequestFull, UrlSsrfResponseBatch, UrlSsrfResponseFull, ValidateUrlRequestFull, ValidateUrlRequestSyntaxOnly, ValidateUrlResponseFull, ValidateUrlResponseSyntaxOnly, WhoisResponse) {
  'use strict';

  /**
   * Domain service.
   * @module api/DomainApi
   * @version 1.4.7
   */

  /**
   * Constructs a new DomainApi. 
   * @alias module:api/DomainApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the domainCheck operation.
     * @callback module:api/DomainApi~domainCheckCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CheckResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Validate a domain name
     * Check whether a domain name is valid or not.  API performs a live validation by contacting DNS services to validate the existence of the domain name.
     * @param {String} domain Domain name to check, for example \&quot;cloudmersive.com\&quot;.  The input is a string so be sure to enclose it in double-quotes.
     * @param {module:api/DomainApi~domainCheckCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CheckResponse}
     */
    this.domainCheck = function(domain, callback) {
      var postBody = domain;

      // verify the required parameter 'domain' is set
      if (domain === undefined || domain === null) {
        throw new Error("Missing the required parameter 'domain' when calling domainCheck");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Apikey'];
      var contentTypes = ['application/json', 'text/json'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = CheckResponse;

      return this.apiClient.callApi(
        '/validate/domain/check', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the domainGetTopLevelDomainFromUrl operation.
     * @callback module:api/DomainApi~domainGetTopLevelDomainFromUrlCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ValidateUrlResponseSyntaxOnly} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get top-level domain name from URL
     * Gets the top-level domain name from a URL, such as mydomain.com.
     * @param {module:model/ValidateUrlRequestSyntaxOnly} request Input URL information
     * @param {module:api/DomainApi~domainGetTopLevelDomainFromUrlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ValidateUrlResponseSyntaxOnly}
     */
    this.domainGetTopLevelDomainFromUrl = function(request, callback) {
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling domainGetTopLevelDomainFromUrl");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Apikey'];
      var contentTypes = ['application/json', 'text/json'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = ValidateUrlResponseSyntaxOnly;

      return this.apiClient.callApi(
        '/validate/domain/url/get-top-level-domain', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the domainIsAdminPath operation.
     * @callback module:api/DomainApi~domainIsAdminPathCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IsAdminPathResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check if path is a high-risk or vulnerable server administration path
     * Check if the input URL or relative path is a server Administration Path, and therefore a risk or vulnerability for remote access.
     * @param {String} value URL or relative path to check, e.g. \&quot;/admin/login\&quot;.  The input is a string so be sure to enclose it in double-quotes.
     * @param {module:api/DomainApi~domainIsAdminPathCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IsAdminPathResponse}
     */
    this.domainIsAdminPath = function(value, callback) {
      var postBody = value;

      // verify the required parameter 'value' is set
      if (value === undefined || value === null) {
        throw new Error("Missing the required parameter 'value' when calling domainIsAdminPath");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Apikey'];
      var contentTypes = ['application/json', 'text/json'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = IsAdminPathResponse;

      return this.apiClient.callApi(
        '/validate/domain/url/is-admin-path', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the domainPhishingCheck operation.
     * @callback module:api/DomainApi~domainPhishingCheckCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PhishingCheckResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check a URL for Phishing threats
     * Checks if an input URL is at risk of being an Phishing (fake login page, or other page designed to collect information via social engineering) threat or attack.
     * @param {module:model/PhishingCheckRequest} request Input URL request
     * @param {module:api/DomainApi~domainPhishingCheckCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PhishingCheckResponse}
     */
    this.domainPhishingCheck = function(request, callback) {
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling domainPhishingCheck");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Apikey'];
      var contentTypes = ['application/json', 'text/json'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = PhishingCheckResponse;

      return this.apiClient.callApi(
        '/validate/domain/url/phishing-threat-check', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the domainPost operation.
     * @callback module:api/DomainApi~domainPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WhoisResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get WHOIS information for a domain
     * Validate whether a domain name exists, and also return the full WHOIS record for that domain name.  WHOIS records include all the registration details of the domain name, such as information about the domain&#39;s owners.
     * @param {String} domain Domain name to check, for example \&quot;cloudmersive.com\&quot;.   The input is a string so be sure to enclose it in double-quotes.
     * @param {module:api/DomainApi~domainPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WhoisResponse}
     */
    this.domainPost = function(domain, callback) {
      var postBody = domain;

      // verify the required parameter 'domain' is set
      if (domain === undefined || domain === null) {
        throw new Error("Missing the required parameter 'domain' when calling domainPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Apikey'];
      var contentTypes = ['application/json', 'text/json'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = WhoisResponse;

      return this.apiClient.callApi(
        '/validate/domain/whois', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the domainQualityScore operation.
     * @callback module:api/DomainApi~domainQualityScoreCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DomainQualityResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Validate a domain name&#39;s quality score
     * Check the quality of a domain name.  Supports over 9 million domain names.  Higher quality scores indicate more trust and authority in the domain name, with values ranging from 0.0 (low quality) to 10.0 (maximum quality).
     * @param {String} domain Domain name to check, for example \&quot;cloudmersive.com\&quot;.
     * @param {module:api/DomainApi~domainQualityScoreCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DomainQualityResponse}
     */
    this.domainQualityScore = function(domain, callback) {
      var postBody = domain;

      // verify the required parameter 'domain' is set
      if (domain === undefined || domain === null) {
        throw new Error("Missing the required parameter 'domain' when calling domainQualityScore");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Apikey'];
      var contentTypes = ['application/json', 'text/json'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = DomainQualityResponse;

      return this.apiClient.callApi(
        '/validate/domain/quality-score', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the domainSafetyCheck operation.
     * @callback module:api/DomainApi~domainSafetyCheckCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UrlSafetyCheckResponseFull} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check a URL for safety threats
     * Checks if an input URL is at risk of being a safety threat through malware, unwanted software, or social engineering threats.
     * @param {module:model/UrlSafetyCheckRequestFull} request Input URL request
     * @param {module:api/DomainApi~domainSafetyCheckCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UrlSafetyCheckResponseFull}
     */
    this.domainSafetyCheck = function(request, callback) {
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling domainSafetyCheck");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Apikey'];
      var contentTypes = ['application/json', 'text/json'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = UrlSafetyCheckResponseFull;

      return this.apiClient.callApi(
        '/validate/domain/url/safety-threat-check', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the domainSsrfCheck operation.
     * @callback module:api/DomainApi~domainSsrfCheckCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UrlSsrfResponseFull} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check a URL for SSRF threats
     * Checks if an input URL is at risk of being an SSRF (Server-side request forgery) threat or attack.
     * @param {module:model/UrlSsrfRequestFull} request Input URL request
     * @param {module:api/DomainApi~domainSsrfCheckCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UrlSsrfResponseFull}
     */
    this.domainSsrfCheck = function(request, callback) {
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling domainSsrfCheck");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Apikey'];
      var contentTypes = ['application/json', 'text/json'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = UrlSsrfResponseFull;

      return this.apiClient.callApi(
        '/validate/domain/url/ssrf-threat-check', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the domainSsrfCheckBatch operation.
     * @callback module:api/DomainApi~domainSsrfCheckBatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UrlSsrfResponseBatch} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check a URL for SSRF threats in batches
     * Batch-checks if input URLs are at risk of being an SSRF (Server-side request forgery) threat or attack.
     * @param {module:model/UrlSsrfRequestBatch} request Input URL request as a batch of multiple URLs
     * @param {module:api/DomainApi~domainSsrfCheckBatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UrlSsrfResponseBatch}
     */
    this.domainSsrfCheckBatch = function(request, callback) {
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling domainSsrfCheckBatch");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Apikey'];
      var contentTypes = ['application/json', 'text/json'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = UrlSsrfResponseBatch;

      return this.apiClient.callApi(
        '/validate/domain/url/ssrf-threat-check/batch', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the domainUrlFull operation.
     * @callback module:api/DomainApi~domainUrlFullCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ValidateUrlResponseFull} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Validate a URL fully
     * Validate whether a URL is syntactically valid (does not check endpoint for validity), whether it exists, and whether the endpoint is up and passes virus scan checks.  Accepts various types of input and produces a well-formed URL as output.
     * @param {module:model/ValidateUrlRequestFull} request Input URL request
     * @param {module:api/DomainApi~domainUrlFullCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ValidateUrlResponseFull}
     */
    this.domainUrlFull = function(request, callback) {
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling domainUrlFull");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Apikey'];
      var contentTypes = ['application/json', 'text/json'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = ValidateUrlResponseFull;

      return this.apiClient.callApi(
        '/validate/domain/url/full', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the domainUrlHtmlSsrfCheck operation.
     * @callback module:api/DomainApi~domainUrlHtmlSsrfCheckCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UrlHtmlSsrfResponseFull} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check a URL for HTML embedded SSRF threats
     * Checks if an input URL HTML is at risk of containing one or more embedded SSRF (Server-side request forgery) threats or attacks.
     * @param {module:model/UrlHtmlSsrfRequestFull} request Input URL request
     * @param {module:api/DomainApi~domainUrlHtmlSsrfCheckCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UrlHtmlSsrfResponseFull}
     */
    this.domainUrlHtmlSsrfCheck = function(request, callback) {
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling domainUrlHtmlSsrfCheck");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Apikey'];
      var contentTypes = ['application/json', 'text/json'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = UrlHtmlSsrfResponseFull;

      return this.apiClient.callApi(
        '/validate/domain/url/ssrf-threat-check/html-embedded', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the domainUrlSyntaxOnly operation.
     * @callback module:api/DomainApi~domainUrlSyntaxOnlyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ValidateUrlResponseSyntaxOnly} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Validate a URL syntactically
     * Validate whether a URL is syntactically valid (does not check endpoint for validity).  Accepts various types of input and produces a well-formed URL as output.
     * @param {module:model/ValidateUrlRequestSyntaxOnly} request Input URL information
     * @param {module:api/DomainApi~domainUrlSyntaxOnlyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ValidateUrlResponseSyntaxOnly}
     */
    this.domainUrlSyntaxOnly = function(request, callback) {
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling domainUrlSyntaxOnly");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Apikey'];
      var contentTypes = ['application/json', 'text/json'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = ValidateUrlResponseSyntaxOnly;

      return this.apiClient.callApi(
        '/validate/domain/url/syntax-only', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
